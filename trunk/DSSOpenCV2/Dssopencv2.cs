//------------------------------------------------------------------------------
// <auto-generated>
//     ??ÏΩîÎìú???ÑÍµ¨Î•??¨Ïö©?òÏó¨ ?ùÏÑ±?òÏóà?µÎãà??
//     ?∞Ì???Î≤ÑÏ†Ñ:2.0.50727.3031
//
//     ?åÏùº ?¥Ïö©??Î≥ÄÍ≤ΩÌïòÎ©??òÎ™ª???ôÏûë??Î∞úÏÉù?????àÏúºÎ©? ÏΩîÎìúÎ•??§Ïãú ?ùÏÑ±?òÎ©¥
//     ?¥Îü¨??Î≥ÄÍ≤??¥Ïö©???êÏã§?©Îãà??
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using W3C.Soap;
using dssopencv2 = Robotics.Dssopencv2;
using Microsoft.Ccr.Adapters.WinForms;

using submgr = Microsoft.Dss.Services.SubscriptionManager;
namespace Robotics.Dssopencv2
{
    
    
    /// <summary>
    /// Implementation class for Dssopencv2
    /// </summary>
    [DisplayName("Dssopencv2")]
    [Description("The Dssopencv2 Service")]
    [Contract(Contract.Identifier)]
    public class Dssopencv2Service : DsspServiceBase
    {
        CLROpenCV.MovingDetect _MovingDetect = null;
        /// <summary>
        /// _state
        /// </summary>
        [ServiceState()]
        private Dssopencv2State _state = new Dssopencv2State();
        
        /// <summary>
        /// _main Port
        /// </summary>
        [ServicePort("/dssopencv2", AllowMultipleInstances=false)]
        private Dssopencv2Operations _mainPort = new Dssopencv2Operations();


        //±∏µ∂ ±‚¥…¿ª ¿ß«ÿ «◊ªÛ √ﬂ∞°µ«æÓ «œ¥¬ ƒ⁄µÂ¿”
        [Partner("SubMgr", Contract = submgr.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.CreateAlways)]
        private submgr.SubscriptionManagerPort _submgrPort = new submgr.SubscriptionManagerPort();



        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public Dssopencv2Service(DsspServiceCreationPort creationPort) : 
                base(creationPort)
        {
        }
        
        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {
			base.Start();
			// Add service specific initialization here.


            WinFormsServicePort.Post(
                new RunForm(
                    delegate()
                    {
                        return new DSSOpenCVForm(
                            ServiceForwarder<Dssopencv2Operations>(ServiceInfo.Service)
                        );
                    }
                )
            );


            //WinFormConstructor wc = new WinFormConstructor(
            //    delegate
            //    {
            //        return new DSSOpenCVForm(_mainPort);
            //    }
            //    );

            //_MovingDetect = (DSSOpenCVForm)wc.Invoke();

            //WinFormsServicePort.FormInvoke(
            //    delegate() { _MovingDetect.Show(); }
            //);

        }


        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public IEnumerator<ITask> SubscribeHandler(Subscribe subscribe)
        {
            SubscribeHelper(_submgrPort, subscribe.Body, subscribe.ResponsePort);
            yield break;
        }


        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public virtual IEnumerator<ITask> ButtonPressHandler(ButtonPress buttonPress)
        {
            SendNotification(_submgrPort, buttonPress);

            yield break;
        }

        //[ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        //public virtual IEnumerator<ITask> IndexUpdateHandler(Dssopencv2State state)
        //{
        //    SendNotification<IndexUpdate>(_submgrPort, state);
        //    yield break;
        //}
    }
}
