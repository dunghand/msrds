병렬 프로그래밍
yield 가 단순한 스크립트에서 순차적 기반의 프로그램밍을 지원하는것 뿐만아니라 개발자가 어떻게 디잔인

하냐에 따라 


것그중에서

요즘 쿼드 듀오 등 멀티프로세서가 기본인 현실에 맞게 많은 개발자들이 멀티프로세싱 개발에 관심을 갖고 있다

필자는 예전부터 게임서버 개발에 참여를 하면서 멀티 프로세싱에 대한 많은 고민을 해 왔다.

필자가 느끼는 가장큰 고민은 멀티 프로세싱을 하기위해서는 비동기 처리와 여러 프로세스가 같은 자원에 접근하는 문제를

효율적으로 풀수 있는 구조를 만들어 나가는 것이였다.

하지만 아무리 신경쓴다해도 단일 프로세스기반으로 작업하는 방식보다 많은 고민과 예외처리를 감당하는것이 많은 부담으로 다가왔다.

그래서 예전부터 가능하면 로직을 크게 단일프로세스 기반으로 짜는 방법을 택하였고 그것이 게임 개발 효율이 적합하다고 생각해왔다..

최근 필자는 C# 을 접하면서 c++ 에서 쉽게 접근하지 못한 비동기 처리방식을 심풀하게 해결할수있는 방법을 알고 C# 에 많은 관심을 가지게 되였다.

많은사람들이 나와같이 많은것을 관심있어 하길 바라며 글을 써본다.

 

글은 루아나 파이썬등 스크립트언어를 한번정도는 다루어본분들을 기준으로 쓴다.

 

독자들은 루아의 코루틴 파인썬의 일드 를 써보았다면 이것이 무슨역활을 하는지 알것이다.

 

게임에서는 주로 코드를 시간의 흐름이나 특정이벤트 분기를 기다리기 위해 쓰인다.

 

최근 우리나라 개발자들이 루아를 많이 쓰므로 루아를 가지고 해보겠다.

 

루아에서 yield 를 이용한 프로그램이 어떠한 효과를 주는지 여러분들은 알것이다.

보통 yield 는 시나리오적인 순서를 코드로 표현할때  효과적인 것을 알것이다.

가령 기획자가 스크립트로 누군가가 특정영역에 들어오면 나무가 쓰러지고 화면이 2초동안 흔들리고 그다음 보스몹이 튀어나온다고 생각했을때 독자들은

스크립트로

waitRect()

action(tree)

time(2)

 spawnMob()

 이렇게 표현할것이다..

결국 yield 는 특정 이벤트를 기다리는 코드를 내부적으로 숨기면서 코드의 흐름을 직관적으로 표현할수있는 것이 큰 장점이다.

 

개발자는 최근 서버 스크립트에 C#을쓰고 있다. c#을 쓰다가 루아의 코루틴같은 기능이 없을까 찾던중 yield 라는 키워드가 같은 역활을 한다는 것을 알았다.

하지만 관련 도큐먼트와 샘풀 코드를 찾아보니 yield 를 매우 단순하게 만 설명한것이 매우 아쉬웠다.

 

yield 가 내부적으로 어떠한 코드를 만들어 내며 이것을 이용해 어떤 코드를 표현할수있는지 설명해보겠다.

 

샘풀코드를 보자..

 

enumulator 안에 구현된 코드는 내부적으로 스테이트변수를 만들어 yield

 

가끔

 

 

 

 

 

 

 

 

 

여러분들은 c#

 

 

 

 
