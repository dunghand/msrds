YIELD 키워드(lua coroutine)
이글은 c# 을 스크립트나 병렬처리를 하기위한 기초지식을 위한 글이다..

 

 c# 을쓰면서 yield 키워드를 쓰는일이 거의 없을수도 있다. 그것은 필요가 없는것이 아니라 그용도와 사용방식을 잘 모르기때문인것 같다.

특히나 이 yield  키워드는 c++ 에 없는 키워드이기에 c++ 프로그래머 들에게는 너무 생소하다.

(c++ 에서  Fiber 라는 것이 있다고 한다.나는 써보지를 않아서....)

 

나또한 이 개념을 알게 된 계기도 서버에서 스크립트로 lua 에서 coroutine 개념을 처음 써보고 후에 c# 에서 이 개념을

써보고 싶어서 자료를 찾던중 yield  라는 키워드로 제공되는것을 알았다.

 

 

 

 

우선 이 yield 키워드가 어떠한 일을 하는지 보고 이것을 가지고 어떠한 곳에서 사용할수있는지 보자.

 gpg 5권을 10.4 목차를 보자

핵심적인 내용은 순차적인 어떠한 서술내용을 프로그램밍으로 직관적으로 표현할수있다라는것이다.

이것이 앞으로 이해할 핵심적내용이다 이 서술적 프로그래밍은 앞으로 이해할 프로그래밍을 설명하는 핵심적 문구라 볼수있다.



다음코드를 보자



 

샘풀코드1

 

 우선 핵심적인 내용은 TestCode1() 함수안에 있는 코드의 진행을 IEnumerator.MoveNext() 라는 함수로 제어를 할수있다는것이다. 
루아를 써보신분은 쉽게 접근을 할수있겠지만 코루틴을 처음 보시는분은 아직도 감이 오지않을것이다.

그렇다면 이것으로 어떤 표현이 가능한지 보자.

 

gpg5권에 루아로 표현된 코드를 c#으로 표현한다면.

 테스트입니다.

일반적인 프로그램으로 저 코드가 작동되는것을 구현하고 비교해봄으로 무엇이 편하고 직관적인지 느낄수있을거다.

c++ 프로그래머 이라면 과연 저것이 내부적으로 어떻게 움직이는지 궁금할것이다.


http://www.lutzroeder.com/dotnet/


여기 사이트에 들어가서 reflector/ 프로그램을 다운받고 위에 샘풀코드 실행파일을 역어셈해보자

역어셈코드를 보면 코드가 어떻게 움직이는지 바로 느낄수있을거다.

한마디로 yield 로 표현된 코드는 우리가 일일히 스테이트관리를 해야하는작업을 코드가 알아서 만들어준다고 보면된다.
우리는 귀찮은 스테이트 관리와 리소스 관리를 컴파일러에게 넘겨주고 우리가 필요한 컨텐츠 코드작성만 하면되는것이다.

마지막으로 yield 로 스킬이나 퀘스트 같은 것을 코드로 표현해봄으로서 순차적인 코드가 필요할때 어떻게 쓸수있는지 보여준다


다음에는 이 yield 프로그래밍을 가지고 분산프로그램을 구현하는것을 보여주겠다.











 

 

 c#으로 스크립트로 작성되는구조라면 한번쯤 yield 키워드를 이용한 스크립트를 제공해보는것도 좋을것같다.

 

 
